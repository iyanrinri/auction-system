services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auction-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-auction_system}
      POSTGRES_USER: ${DB_USERNAME:-auction_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-auction_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_HOST_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - auction-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-auction_user} -d ${DB_NAME:-auction_system}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: auction-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME:-auction_user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-auction_password}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-auction_vhost}
    ports:
      - "${RABBITMQ_HOST_PORT:-5673}:5672"   # AMQP port
      - "${RABBITMQ_MANAGEMENT_PORT:-15673}:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - auction-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # Redis Cache (optional, for sessions/caching)
  redis:
    image: redis:7-alpine
    container_name: auction-redis
    restart: unless-stopped
    ports:
      - "${REDIS_HOST_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - auction-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # NestJS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: auction-app
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3000}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-auction_user}
      DB_PASSWORD: ${DB_PASSWORD:-auction_password}
      DB_NAME: ${DB_NAME:-auction_system}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_URL: amqp://${RABBITMQ_USERNAME:-auction_user}:${RABBITMQ_PASSWORD:-auction_password}@rabbitmq:5672/${RABBITMQ_VHOST:-auction_vhost}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-for-development}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
    ports:
      - "${APP_HOST_PORT:-3000}:3000"
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - auction-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: auction-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@auction.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_HOST_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - auction-network
    depends_on:
      - postgres

networks:
  auction-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local